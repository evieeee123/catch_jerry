/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("// entry file for js\n// import * as export1 from \"./scripts/tom.js\";\n// new export1.Player();\n// setup canvas\nconst canvas = document.getElementById('game-canvas');\nconst ctx = canvas.getContext('2d');\ncanvas.width = 900;\ncanvas.heigth = 500;\nctx.fillStyle = '#fed9b7';\nctx.fillRect(0, 0, 900, 500);\nctx.fillStyle = 'black';\nctx.font = '40px Indie Flower, cursive';\nctx.fillText('RULES', 380, 90);\nctx.font = '30px Indie Flower, cursive';\nctx.fillText('Click Jerry to catch it!', 310, 200);\nctx.fillText('The time of game is 20s', 300, 300);\nctx.fillText('Each Jerry you catch can get 1 point and 1 more second', 120, 400);\nlet score = 0;\nlet time = 20;\nlet gameFrame = 110;\nlet isGameover = false;\nctx.font = '55px Indie Flower, cursive'; // add background img into canvas\n\nfunction addImageToCanvas() {\n  const background = new Image();\n  background.src = './img/game_bg.png'; //draw background image\n\n  ctx.drawImage(background, 0, 0, 900, 500);\n}\n\nfunction scoreImg() {\n  const img = new Image();\n  img.src = './img/catch_jerry.gif';\n  ctx.drawImage(img, 10, 5, 40, 50);\n}\n\nfunction timerImg() {\n  const timer = new Image();\n  timer.src = './img/cheese-timer.png';\n  ctx.drawImage(timer, 815, 13, 70, 70);\n}\n\nconst timer = document.querySelector('.start-button');\ntimer.addEventListener('click', () => {\n  setInterval(() => {\n    time--;\n\n    if (time <= 0) {\n      isGameover = true; // gameOver();\n      // console.log(\"1\", gameOver())\n      // stop();\n      // time = 20;\n    }\n  }, 1000);\n\n  function stop() {\n    clearInterval(interval); // alert('Game Over: your score is ' + score)\n  } // function gameOver() {\n  //     ctx.fillStyle = 'brown';\n  //     ctx.fillText('Game Over', 300, 200);\n  //     ctx.fillText('Your score: ' + score, 300, 260);\n  //     // isGameover = true;\n  // }\n  // console.log(\"2\", gameOver())\n  // start point tom\n  // make sure Tom will not run out of the canvas\n\n\n  let canvasPos = canvas.getBoundingClientRect();\n  const mouse = {\n    // initial Tom move(end)\n    x: canvas.width / 2,\n    y: canvas.heigth,\n    click: false\n  };\n  canvas.addEventListener('mousedown', e => {\n    mouse.click = true;\n    mouse.x = e.x - canvasPos.left;\n    mouse.y = e.y - canvasPos.top;\n  });\n  canvas.addEventListener('mouseup', () => {\n    mouse.click = false;\n  }); // Tom\n\n  const playerLeft = new Image();\n  playerLeft.src = './img/tom.gif';\n  const playerRight = new Image();\n  playerRight.src = './img/tom-right.gif';\n\n  class Player {\n    constructor() {\n      // initial Tom move(start)\n      this.x = canvas.width - canvas.width;\n      this.y = canvas.heigth;\n      this.radius = 40;\n      this.angle = 0;\n      this.frame = 0;\n    } // update Tom position to move Tom toward the mouse\n\n\n    update() {\n      // compare Tom's crrent position and mouse current position\n      const dx = this.x - mouse.x;\n      const dy = this.y - mouse.y; // change angle; make Tom always face mouse direction\n\n      let theta = Math.atan2(dy, dx);\n      this.angle = theta;\n\n      if (mouse.x !== this.x) {\n        // dx/20: the number use to control the movement speed\n        this.x -= dx / 10;\n      }\n\n      if (mouse.y !== this.y) {\n        this.y -= dy / 10;\n      }\n    }\n\n    draw() {\n      // draw a line to show the path\n      // if(mouse.click) {\n      //     ctx.lineWidth = 0.2;\n      //     ctx.beginPath();\n      //     ctx.moveTo(this.x, this.y);\n      //     ctx.lineTo(mouse.x, mouse.y);\n      //     ctx.stroke();\n      // }\n      // draw Tom circle\n      // ctx.fillStyle = 'red';\n      // ctx.beginPath();\n      // ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n      // ctx.fill();\n      // ctx.closePath();\n      // ctx.fillRect(this.x, this.y, this.radius, 10);\n      // save current canvas setting\n      ctx.save();\n      ctx.translate(this.x, this.y);\n      ctx.rotate(this.angle); // add Tom img\n\n      if (this.x >= mouse.x) {\n        ctx.drawImage(playerLeft, -50, -45, 100, 90);\n      } else {\n        ctx.drawImage(playerRight, -45, -50, 100, 90);\n      } // reset all translate and rotate back to how they were when last called ctx.save\n\n\n      ctx.restore();\n    }\n\n  } // create a new Tom\n\n\n  const player = new Player(); // Jerry\n\n  const jerry1 = new Image();\n  jerry1.src = './img/jerry-cheese.png';\n  const jerry2 = new Image();\n  jerry2.src = './img/running_jerry.gif';\n  const jerry0 = new Image();\n  jerry0.src = './img/catch_jerry.gif';\n  const jerryArr = [];\n\n  class Jerry {\n    constructor() {\n      // let jerry show up from right\n      this.x = canvas.width + Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height + 90;\n      this.radius = 40;\n      this.speed = Math.random() * 8 + 3; // keep track of distance between each individual jerry and tom (trigger the score add up when Tom hit Jerry)\n\n      this.distance;\n      this.counted = false;\n      this.jerry = Math.random();\n    }\n\n    update() {\n      // move jerry from ringt to left and make jerry show up with different speed\n      this.x -= this.speed; // calculate distance between Tom and Jerry\n\n      const dx = this.x - player.x;\n      const dy = this.y - player.y;\n      this.distance = Math.sqrt(dx * dx + dy * dy);\n    }\n\n    draw() {\n      // ctx.fillStyle = 'blue';\n      // ctx.beginPath();\n      // ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n      // ctx.fill();\n      // ctx.closePath();\n      // ctx.stroke();\n      if (this.jerry <= 0.4) {\n        ctx.drawImage(jerry1, this.x - 30, this.y - 30, 65, 65);\n      } else {\n        ctx.drawImage(jerry2, this.x - 30, this.y - 30, 58, 58);\n      }\n    }\n\n  }\n\n  const catchJerry = document.createElement('audio');\n  catchJerry.src = './audio/catch-jerry.mp3';\n\n  function handleJerry() {\n    // run this code every 130 frames\n    if (gameFrame % 110 === 0) {\n      // each 130 frame show up a jerry\n      jerryArr.push(new Jerry());\n    }\n\n    for (let i = 0; i < jerryArr.length; i++) {\n      // iterate through the jerry and draw one by one\n      jerryArr[i].update();\n      jerryArr[i].draw(); // when jerry run out of the canvas and tom didn't catch it do (also prevent jerry disappear early when hit the boarder):\n\n      if (jerryArr[i].x < 0 - jerryArr[i].radius) {\n        // remove that jerry from the array\n        jerryArr.splice(i, 1);\n        i--; // check the distance between Tom and jerry\n      } else if (jerryArr[i] && jerryArr[i].distance < jerryArr[i].radius + player.radius) {\n        // make every jerry only count once\n        if (!jerryArr[i].counted) {\n          // play the sound\n          catchJerry.play();\n          score++;\n          time += 1;\n          ctx.drawImage(jerry0, jerryArr[i].x, jerryArr[i].y, 65, 65);\n          jerryArr[i].counted = true; // remove jerry once be catched\n\n          jerryArr.splice(i, 1);\n          i--;\n        }\n      }\n    }\n  }\n\n  timer.addEventListener('click', () => {\n    window.location.reload();\n  }); // Animation\n\n  function animate() {\n    // erases the entire canvas from old paint between every animation frame\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    addImageToCanvas();\n    scoreImg();\n    timerImg();\n    handleJerry();\n    player.update();\n    player.draw(); // score style\n\n    ctx.fillStyle = 'orange';\n    ctx.fillText(score, 60, 46);\n    ctx.fillStyle = 'black';\n    ctx.fillText(time, 825, 60);\n    gameFrame++; // create a loop; animate another frame at the next repaint\n\n    if (!isGameover) {\n      requestAnimationFrame(animate);\n    } else {\n      ctx.fillStyle = 'brown';\n      ctx.fillText('Game Over', 300, 200);\n      ctx.fillText('Your score: ' + score, 300, 260); // timer.addEventListener('click', () => {\n      //     window.location.reload()\n      // })\n    }\n  }\n\n  animate();\n}); // change the mouse cursor\n\nlet cursor = document.querySelector('.cursor');\nwindow.addEventListener('mousemove', e => {\n  cursor.style.top = e.pageY + 'px';\n  cursor.style.left = e.pageX + 'px';\n});\nwindow.addEventListener('mousedown', () => {\n  cursor.classList.add('active');\n});\nwindow.addEventListener('mouseup', () => {\n  cursor.classList.remove('active');\n});\nlet bgMusic = document.getElementById('background_music');\nlet icon = document.getElementById('icon');\n\nicon.onclick = function () {\n  if (bgMusic.paused) {\n    bgMusic.play();\n    icon.src = './img/music_on.png';\n  } else {\n    bgMusic.pause();\n    icon.src = './img/music_off.png';\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;